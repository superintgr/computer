lines = [] # All the available services for communication
channels = [] # All the registered channels across all lines.
subscribers = [] # Dynamically updating list of subscription profiles.
routers = [] # List of all the registered routing devices at subscription points.
stations = [] # List of all the registered stations that broadcast channel functions.
interfaces = [] # List of all the device interface connecting subscribed channels through routers.
costs = [] # Records of all the cost associated with each line and communication mediums.

class Subscriber:
    def __init__(self, line, router, channels, cost):
        self.channels = channels
        self.router = router
        self.line = line
        self.cost = cost
        self.statements = []
        self.device = None
        self.notifications = []
        self.messages = []
        self.activate = False

    def resolve_statement(self, matrix):
        for statement in statements:
            self.cost *= matrix @ statement.T
            self.set_alert("Cost updated")

    def initialize(self, device, weights):
        balance = 0
        for channel in self.channels:
            feed = self.router @ device.T + self.line
            forward = weights @ channel.T + feed
            self.statements.append(forward)
            self.set_alert("New statement attached")
            balance += 1 - feed**2
        if balance >= self.cost:
            self.activate = True
            self.cost = balance / self.cost
            self.set_alert("Cost updated")
            self.device = device
            self.add_message("{} is now active!".format(device))
            self.set_alert("New message received")
       self.set_alert("Failed to activate") 


class Line:
    def __init__(self, left, front, right):
        self.left = left
        self.front = front
        self.right = right
        self.queue = []
        self.buffer = []

    def attach(self, vector):
        message = self.solve(vector, self.left)
        self.buffer.append(message)

    def transmit(self):
        vector = self.buffer[-1]
        message = self.solve(vector, self.front)
        self.queue.append(message)

    def release(self):
        vector = self.queue.pop(0)
        message = self.solve(vector, self.right)
        self.buffer.pop()
